/*1. Найти позицию минимального элемента в неотсортированной части массива
2. Произвести обмен этого значения со значением первой неотсортированной позиции
3. Повторять пока есть не отсортированные элементы
6 8 3 2 1 4 5 7
1 2 3 4 5 6 7 8
int[] arr = { 6, 8, 3, 2, 1, 4, 5, 7 };
// далее решаем задачу по выведению массива на экран 
void PrintArray(int[] array)// в качестве аргумента будет приходить массив 
{
    int count = array.Length; // получение количества элементов 
    for (int i = 0; i < count; i++) // цикл фор мы пробегаем по всем элементам нашего массива 
    {
        Console.Write($"{array[i]} ");// - на каждом шаге выводим на экран текущий эллемент массива
    }
    Console.WriteLine();
}
// следующим этапом нам надо написать метод, который будет упорядочивать наш массив
void sel(int[] array)// sel просто моё название для переменной 
{
    for (int a = 0; a < array.Length - 1; a++)// тут похую какие название i или a 
    {
        int minPosition = a; // запоминаем ту рабочую позицию элемента для которой в дальнейшем будем производить какие-то действия 
                             // далее ищем наш минмиальный элемент 
        for (int b = a + 1; b < array.Length; b++)// началная позиция от которой мы будем будем начинать эти действия, тот кусочек массива который был отссортирован мы его не касаемся,
                                                  // а то что у нас отсортировано начинется с а +1 позиции
        {
            if (array[b] < array[minPosition]) minPosition = b;   //в этом блоке кода мы ищем элемент минимаьный, для этого мы смотрим текущий и если он меньше того эл-та который 
                                                                  // на минПозитион то наша задача вот эту текущую позицию сохранить 
        }
        int temp = array[a]; // нам потребуется поменять значения нашей минимальной позиции с той позией которую мы нашли 
        array[a] = array[minPosition];// сюда мы кладём то что мы нашли , простой обмен 2х переменных местами
        array[minPosition] = temp; // сюда мы кладём тот элемент, который был временным 
    }
}
PrintArray(arr);
sel(arr);
PrintArray(arr); */

/*2. Найти позицию максимального элемента в неотсортированной части массива
2. Произвести обмен этого значения со значением первой неотсортированной позиции
3. Повторять пока есть не отсортированные элементы
6 8 3 2 1 4 5 7
8 7 6 5 4 3 2 1 
*/
int[] arr = { 6, 8, 3, 2, 1, 4, 5, 7 };
void PrintArray(int[] array)
{
    int count = array.Length;
    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} ");
    }
    Console.WriteLine();
}
void sel(int[] array)
{
    for (int a = 0; a < array.Length - 1; a++)
    {
        int maxPosition = a;
        for (int b = a + 1; b < array.Length; b++)
        {
            if (array[b] > array[maxPosition]) maxPosition = b;
        }
        int temp = array[a];
        array[a] = array[maxPosition];
        array[maxPosition] = temp;
    }
}
PrintArray(arr);
sel(arr);
PrintArray(arr);